{
    "docs": [
        {
            "location": "/index.html", 
            "text": "envman\n\n\nenvman\n is a small package exposing Python \nand\n REST APIs to manage \ncommondata environments and platform parameters.\n\n\nUsage Primer\n\n\n# Parameter api\n\n\n\nfrom\n \nenvman\n  \nimport\n \nParameter\n \n\n\n# Puts a parameter related to an environment\n\n\nParameter\n.\nput_parameter\n(\nenv\n=\ndev\n,\nname\n=\nVpcId\n,\n \nvalue\n=\nvpc-12345\n)\n\n\n\n\n# Puts a parameter related to a platform\n\n\nParameter\n.\nput_parameter\n(\nenv\n=\ndev\n,\nuri\n=\nuri:123456:platform:dev\n,\n \nname\n=\nPubSubnetId\n,\n \nvalue\n=\nsubnet-12345\n)\n\n\n\n# Gets a parameter\n\n\nParameter\n.\nget_parameter\n(\ndev\n,\nuri:123456:platform:dev\n,\n \nPubSubnetId\n)\n\n\nsubnet-12345\n\n\n\n# Gets all parameters as dict under an env\n\n\nParameter\n.\nget_parameters\n(\nenv\n=\ndev\n)\n\n\n{\n\n    \nEnvironment\n \n:\n \n{\n\n        \ndev\n \n:\n \n{\n\n           \nglobals\n \n:\n \n{\n\n                \nVpcId\n \n:\n \nvpc-12345\n\n            \n},\n\n            \nplatforms\n \n:\n \n{\n\n                \nuri:platform:123456:dev\n \n:\n \n{\n\n                    \nPubSubnetId\n \n:\n \nsubnet-12345\n\n                \n}\n\n            \n}\n\n\n        \n}\n\n    \n}\n\n\n}\n\n\n# Gets all parameters as dict under a platform uri\n\n\nParameter\n.\nget_parameters\n(\nenv\n=\ndev\n,\n \nuri\n=\nuri:platform:123456:dev\n \n)\n\n\n{\n\n    \nEnvironment\n \n:\n \n{\n\n        \ndev\n \n:\n \n{\n\n            \nplatforms\n \n:\n \n{\n\n                \nuri:platform:123456:dev\n \n:\n \n{\n\n                    \nPubSubnetId\n \n:\n \nsubnet-12345\n\n                \n}\n\n            \n}\n\n\n        \n}\n\n    \n}\n\n\n}\n\n\n\n\n\nPython Api\n\n\nenvman.Parameter.put_parameter\n\n\n\n\nenv\n(str) : environment key\n\n\nuri\n(str, optional) : resource uri\n\n\nname\n(str,optional) : name of the parameter\n\n\nvalue\n(str, optional) : value of the parameter\n\n\ndescription\n(string, optional) : description of the parameter\n\n\n\n\n\n\nCreates a parameter in SSM under env  \n\n\n\n\nenvman.Parameter.get_parameter\n\n\n\n\nenv\n(str) : environment key\n\n\nuri\n(str, optional) : resource uri\n\n\nname\n(str,optional) : name of the parameter\n\n\n\n\n\n\nReads  the parameter value in the given env.\n  One or both of uri and name must be provided\n\n\n\n\nenvman.Parameter.get_parameters\n\n\n\n\nenv\n(str) : environment key\n\n\nuri\n(str, optional) : resource uri\n\n\n\n\n\n\nReturns  a dict with all parameters under this env/uri\nThe dict has following format : \n\n{\n\n\nEnvironment\n \n:\n \n{\n\n    \nenv\n \n:\n \n{\n\n        \nglobals\n \n:\n \n{\n\n            \nname\n \n:\n \nvalue\n\n        \n},\n\n        \nplatforms\n \n:\n \n{\n\n            \nuri\n \n:\n \n{\n\n                \nname\n \n:\n \nvalue\n\n            \n}\n\n        \n}\n\n\n    \n}\n\n    \n}\n\n\n}\n\n\n\n\n\n\nREST Api\n\n\nPOST :/parameter\n\n- body.\nenv\n(str)\n- body.\nuri\n(str)\n- body.\nname\n(str)\n- body.\nvalue\n(str)\n- body.\ndescription\n(string, \noptional\n\n\n\n\nCreates a parameter in SSM with uri/resource_type/accountid/.../name \n    with the provided value  and description\n\n\n\n\nGET: /parameter\n\n\n\n\nquerystring.\nenv\n(str)\n\n\nquerystring.\nuri\n(str)\n\n\nquerystring.\nname\n(str)\n\n\n\n\n\n\nReads  the parameter value\n\n\n\n\nGET :/parameters\n\n\n\n\nquerystring.\nenv\n(str)\n\n\nquerystring.\nuri\n(str)\n\n\n\n\n\n\nReturns  a dict with all parameters under this env/uri\n\n\n\n\nREST API Programmatic Examples  with \nrequests\n\n\nimport\n \nrequests\n\n\nendpoint\n \n=\n \nAPI GATEWAY endpoing\n\n\n# putting a parameter\n\n\nresponse\n \n=\n \nrequests\n.\npost\n(\n\n    \nendpoint\n+\n/parameter\n,\n \n    \njson\n \n=\n \n{\n\n        \nenv\n \n:\n \ntests\n,\n\n        \nuri\n \n:\nuri:platform:123456:dev\n,\n\n        \nname\n \n:\n \nplatformparam\n,\n\n        \nvalue\n:\n \nplatformvalue\n\n    \n}\n\n\n)\n\n\n\n# getting a parameter\n\n\nresponse\n \n=\n \nrequests\n.\nget\n(\n\n    \nendpoint\n \n+\n \n/parameter\n,\n\n    \nparams\n=\n{\n\n        \nenv\n \n:\n \ntests\n,\n\n        \nname\n:\n \nplatformparam\n,\n\n        \nuri\n:\n \nuri:platform:123456:dev\n\n        \n}\n\n\n)\n           \n\n\n\n# getting all parameters in an environment \n\n\nresponse\n \n=\n \nrequests\n.\nget\n(\n\n    \nendpoint\n \n+\n \n/parameters\n,\n\n    \nparams\n=\n{\n\n        \nenv\n \n:\n \ntests\n\n    \n}\n\n\n)", 
            "title": "Welcome to envman"
        }, 
        {
            "location": "/index.html#envman", 
            "text": "envman  is a small package exposing Python  and  REST APIs to manage \ncommondata environments and platform parameters.", 
            "title": "envman"
        }, 
        {
            "location": "/index.html#usage-primer", 
            "text": "# Parameter api  from   envman    import   Parameter   # Puts a parameter related to an environment  Parameter . put_parameter ( env = dev , name = VpcId ,   value = vpc-12345 )  # Puts a parameter related to a platform  Parameter . put_parameter ( env = dev , uri = uri:123456:platform:dev ,   name = PubSubnetId ,   value = subnet-12345 )  # Gets a parameter  Parameter . get_parameter ( dev , uri:123456:platform:dev ,   PubSubnetId )  subnet-12345  # Gets all parameters as dict under an env  Parameter . get_parameters ( env = dev )  { \n     Environment   :   { \n         dev   :   { \n            globals   :   { \n                 VpcId   :   vpc-12345 \n             }, \n             platforms   :   { \n                 uri:platform:123456:dev   :   { \n                     PubSubnetId   :   subnet-12345 \n                 } \n             } \n\n         } \n     }  }  # Gets all parameters as dict under a platform uri  Parameter . get_parameters ( env = dev ,   uri = uri:platform:123456:dev   )  { \n     Environment   :   { \n         dev   :   { \n             platforms   :   { \n                 uri:platform:123456:dev   :   { \n                     PubSubnetId   :   subnet-12345 \n                 } \n             } \n\n         } \n     }  }", 
            "title": "Usage Primer"
        }, 
        {
            "location": "/index.html#python-api", 
            "text": "envman.Parameter.put_parameter   env (str) : environment key  uri (str, optional) : resource uri  name (str,optional) : name of the parameter  value (str, optional) : value of the parameter  description (string, optional) : description of the parameter    Creates a parameter in SSM under env     envman.Parameter.get_parameter   env (str) : environment key  uri (str, optional) : resource uri  name (str,optional) : name of the parameter    Reads  the parameter value in the given env.\n  One or both of uri and name must be provided   envman.Parameter.get_parameters   env (str) : environment key  uri (str, optional) : resource uri    Returns  a dict with all parameters under this env/uri\nThe dict has following format :  {  Environment   :   { \n     env   :   { \n         globals   :   { \n             name   :   value \n         }, \n         platforms   :   { \n             uri   :   { \n                 name   :   value \n             } \n         } \n\n     } \n     }  }", 
            "title": "Python Api"
        }, 
        {
            "location": "/index.html#rest-api", 
            "text": "POST :/parameter \n- body. env (str)\n- body. uri (str)\n- body. name (str)\n- body. value (str)\n- body. description (string,  optional   Creates a parameter in SSM with uri/resource_type/accountid/.../name \n    with the provided value  and description   GET: /parameter   querystring. env (str)  querystring. uri (str)  querystring. name (str)    Reads  the parameter value   GET :/parameters   querystring. env (str)  querystring. uri (str)    Returns  a dict with all parameters under this env/uri", 
            "title": "REST Api"
        }, 
        {
            "location": "/index.html#rest-api-programmatic-examples-with-requests", 
            "text": "import   requests  endpoint   =   API GATEWAY endpoing  # putting a parameter  response   =   requests . post ( \n     endpoint + /parameter ,  \n     json   =   { \n         env   :   tests , \n         uri   : uri:platform:123456:dev , \n         name   :   platformparam , \n         value :   platformvalue \n     }  )  # getting a parameter  response   =   requests . get ( \n     endpoint   +   /parameter , \n     params = { \n         env   :   tests , \n         name :   platformparam , \n         uri :   uri:platform:123456:dev \n         }  )             # getting all parameters in an environment   response   =   requests . get ( \n     endpoint   +   /parameters , \n     params = { \n         env   :   tests \n     }  )", 
            "title": "REST API Programmatic Examples  with requests"
        }
    ]
}